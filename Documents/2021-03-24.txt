Class and Style Bindings
1)Binding HTML Classes

-Object Syntax:
  -We can pass an object to v-bind:class to dynamically toggle classes:
  -ex.,<div v-bind:class="{ active: isActive }"></div>
     OR <div v-bind:class="classObject"></div>
	data: {
	  classObject: {
	    active: true,
	    'text-danger': false
	  }
	}

-Array Syntax
 -We can pass an array to v-bind:class to apply a list of classes:
 -ex.,<div v-bind:class="[activeClass, errorClass]"></div>
	data: {
	  activeClass: 'active',
	  errorClass: 'text-danger'
	}
	
	Which will render:
	<div class="active text-danger"></div>

-With Components
 -ex.,<my-component v-bind:class="{ active: isActive }"></my-component>
	data: {
	  classObject: {
	    isActive: true,
	  }
	}


2)Binding Inline Styles

-syntax:<div v-bind:style="{ attributeName:attributeValue }"></div>

(2.1)Object Syntax:-

-The object syntax for v-bind:style is pretty straightforward - it looks almost like CSS, except it’s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:

<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
data: {
  activeColor: 'red',
  fontSize: 30
}

-It is often a good idea to bind to a style object directly so that the template is cleaner:

Ex.,<div v-bind:style="styleObject"></div>
	data: {
	  styleObject: {
	    color: 'red',
	    fontSize: '13px'
	  }
	}

(2.2)Array Syntax:-

The array syntax for v-bind:style allows you to apply multiple style objects to the same element:

Ex.,<div v-bind:style="[baseStyles, overridingStyles]"></div>
-data: {
	  baseStyles: {
	    color: 'red',
	    fontSize: '13px'
	  },
          overridingStyles: {
            
	  }
	}


3)Conditional Rendering:-
  
3.1)v-if vs v-show
-v-if is “real” conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles.
-In comparison, v-show is much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling.

-v-if will destroy element from dom and v-show will only set display:none on element in dom(when value is false)

important:-v-if has higher toggle costs while v-show has higher initial render costs. 
So prefer v-show if you need to toggle something very often, and 
prefer v-if if the condition is unlikely to change at runtime.


3.2)v-if with v-for:-
-can't use v-if and v-for in same element.

4)List Rendering:-
-syntax:-
(4.1)
	<li v-for="(item,index) in items" :key="item.id"></li> 

(4.2)v-for with an Object:-
     <div v-for="(value, name, index) in object">
	  {{ index }}. {{ name }}: {{ value }}
     </div>
     
data: {
    object: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }

-important:
  - Maintaining State:
    When Vue is updating a list of elements rendered with v-for, by default it uses an “in-place patch” strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index.

This default mode is efficient, but only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values).

Example link:-https://vuejs.org/v2/guide/conditional.html#Controlling-Reusable-Elements-with-key

5)Array Change Detection:
-different method to mutate array.
push()
pop()
shift()
unshift()
splice()
sort()
reverse()



